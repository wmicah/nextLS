generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
 //directUrl = env("DIRECT_URL")
}

model User {
  id                       String                  @id @default(cuid())
  email                    String                  @unique
  name                     String?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  stripeCurrentPeriodEnd   DateTime?               @map("stripe_current_period_end")
  stripeCustomerId         String?                 @unique @map("stripe_customer_id")
  stripePriceId            String?                 @map("stripe_price_id")
  stripeSubscriptionId     String?                 @unique @map("stripe_subscription_id")
  role                     UserRole?
  workingHoursStart        String?                 @map("working_hours_start")
  workingHoursEnd          String?                 @map("working_hours_end")
  isAdmin                  Boolean                 @default(false)
  inviteCode               String?                 @unique @map("invite_code")
  organizationId           String?                 @map("organization_id")
  workingDays              String[]                @default(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]) @map("working_days")
  timeSlotInterval         Int                     @default(60) @map("time_slot_interval")
  lastLoginAt              DateTime?               @map("last_login_at")
  client1Conversations     Conversation[]          @relation("Client1Conversations")
  client2Conversations     Conversation[]          @relation("Client2Conversations")
  clientConversations      Conversation[]          @relation("ClientConversations")
  coachConversations       Conversation[]          @relation("CoachConversations")
  sentMessages             Message[]
  inbox                    UserInbox?
  adminAuditLogs           AdminAuditLog[]
  assignedWorkoutsAsClient AssignedWorkout[]       @relation("ClientAssignedWorkouts")
  coachedWorkouts          AssignedWorkout[]       @relation("CoachAssignedWorkouts")
  clientAnalytics          ClientAnalytics[]
  clientVideoSubmissions   ClientVideoSubmission[] @relation("CoachVideoSubmissions")
  clients                  Client[]                @relation("CoachClients")
  clientProfile            Client?                 @relation("UserClient")
  coachAnalytics           CoachAnalytics?
  assignedEvents           Event[]                 @relation("CoachEvents")
  libraryResources         LibraryResource[]
  notifications            Notification[]
  programReplacements      ProgramDayReplacement[]
  programs                 Program[]               @relation("CoachPrograms")
  clientProgress           Progress[]              @relation("ClientProgress")
  assignedProgress         Progress[]              @relation("CoachProgress")
  routines                 Routine[]               @relation("CoachRoutines")
  screenRecordings         ScreenRecording[]       @relation("CoachScreenRecordings")
  settings                 UserSettings?
  videoAnnotations         VideoAnnotation[]       @relation("CoachVideoAnnotations")
  videoAssignments         VideoAssignment[]
  videoAudioNotes          VideoAudioNote[]        @relation("CoachVideoAudioNotes")
  videoFeedback            VideoFeedback[]         @relation("CoachVideoFeedback")
  uploadedVideos           Video[]                 @relation("UserVideos")
  weeklySchedulesAsClient  WeeklySchedule[]        @relation("ClientWeeklySchedules")
  coachedSchedules         WeeklySchedule[]        @relation("CoachWeeklySchedules")
  workoutTemplates         WorkoutTemplate[]
  clientWorkouts           Workout[]               @relation("ClientWorkouts")
  assignedWorkouts         Workout[]               @relation("CoachWorkouts")
  
  // Organization relationships
  ownedOrganization        Organization?           @relation("OrganizationOwner")
  organization             Organization?           @relation("OrganizationCoaches", fields: [organizationId], references: [id])
  coachOrganizations       CoachOrganization[]     @relation("CoachOrganizations")
  createdPrograms          Program[]               @relation("CreatedPrograms")
  createdRoutines          Routine[]               @relation("CreatedRoutines")
  primaryCoachClients      Client[]                @relation("PrimaryCoachClients")
  coachClientAssignments   ClientCoachAssignment[] @relation("CoachClientAssignments")
  assignedByMe             ClientCoachAssignment[] @relation("AssignedBy")
  lessonReminders          LessonReminder[]

  @@map("users")
}

model Client {
  id                   String                  @id @default(cuid())
  name                 String
  email                String?
  phone                String?
  notes                String?
  coachId              String?
  organizationId       String?                 @map("organization_id")
  primaryCoachId       String?                 @map("primary_coach_id")
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  nextLessonDate       DateTime?
  lastCompletedWorkout String?
  avatar               String?
  dueDate              String?
  lastActivity         String?
  updates              String?
  userId               String?                 @unique
  archived             Boolean                 @default(false)
  archivedAt           DateTime?
  age                  Int?
  averageSpeed         Float?
  changeupSpinRate     Int?
  curveSpinRate        Int?
  dropSpinRate         Int?
  height               String?
  reachingAbility      ReachingAbility?
  riseSpinRate         Int?
  topSpeed             Float?
  dominantHand         DominantHand?
  movementStyle        MovementStyle?
  analytics            ClientAnalytics?
  videoSubmissions     ClientVideoSubmission[]
  coach                User?                   @relation("CoachClients", fields: [coachId], references: [id])
  user                 User?                   @relation("UserClient", fields: [userId], references: [id])
  drillCompletions     DrillCompletion[]
  events               Event[]
  programAssignments   ProgramAssignment[]
  programReplacements  ProgramDayReplacement[]
  routineAssignments   RoutineAssignment[]
  swapRequestsSent     TimeSwapRequest[]       @relation("SwapRequester")
  swapRequestsReceived TimeSwapRequest[]       @relation("SwapTarget")
  videos               Video[]
  reminders           LessonReminder[]
  
  // Organization relationships
  organization         Organization?           @relation("OrganizationClients", fields: [organizationId], references: [id])
  primaryCoach         User?                   @relation("PrimaryCoachClients", fields: [primaryCoachId], references: [id])
  assignedCoaches      ClientCoachAssignment[] @relation("ClientCoachAssignments")
  routineExerciseCompletions RoutineExerciseCompletion[] @relation("ClientRoutineExerciseCompletions")
  programDrillCompletions    ProgramDrillCompletion[]    @relation("ClientProgramDrillCompletions")

  @@map("clients")
}

model LibraryResource {
  id              String            @id @default(cuid())
  title           String
  description     String?
  category        String
  type            String
  url             String
  duration        String?
  thumbnail       String?
  rating          Float             @default(0)
  views           Int               @default(0)
  coachId         String
  youtubeId       String?
  playlistId      String?
  isYoutube       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  filename        String?
  channelId       String?
  isActive        Boolean           @default(true)
  isFeatured      Boolean           @default(false)
  isMasterLibrary Boolean           @default(false)
  contentType     String?
  size            Int?
  isOnForm        Boolean           @default(false)
  onformId        String?
  coach           User              @relation(fields: [coachId], references: [id], onDelete: Cascade)
  assignments     VideoAssignment[]

  @@map("library_resources")
}

model Conversation {
  id        String           @id @default(cuid())
  coachId   String?
  clientId  String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  client1Id String?
  client2Id String?
  type      ConversationType @default(COACH_CLIENT)
  client1   User?            @relation("Client1Conversations", fields: [client1Id], references: [id], onDelete: Cascade)
  client2   User?            @relation("Client2Conversations", fields: [client2Id], references: [id], onDelete: Cascade)
  client    User?            @relation("ClientConversations", fields: [clientId], references: [id], onDelete: Cascade)
  coach     User?            @relation("CoachConversations", fields: [coachId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@unique([coachId, clientId])
  @@unique([client1Id, client2Id])
}

model Message {
  id                     String       @id @default(cuid())
  conversationId         String
  senderId               String
  content                String
  isRead                 Boolean      @default(false)
  createdAt              DateTime     @default(now())
  attachmentName         String?
  attachmentSize         Int?
  attachmentType         String?
  attachmentUrl          String?
  acknowledgedAt         DateTime?
  acknowledgedBy         String?
  isAcknowledged         Boolean      @default(false)
  requiresAcknowledgment Boolean      @default(false)
  data                   Json?
  conversation           Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender                 User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
}

model Workout {
  id          String   @id @default(cuid())
  title       String
  description String?
  notes       String?
  duration    String?
  videoUrl    String?
  clientId    String
  coachId     String
  date        DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      User     @relation("ClientWorkouts", fields: [clientId], references: [id], onDelete: Cascade)
  coach       User     @relation("CoachWorkouts", fields: [coachId], references: [id], onDelete: Cascade)

  @@map("workouts")
}

model Event {
  id             String            @id @default(cuid())
  title          String
  description    String?
  date           DateTime
  clientId       String?
  coachId        String
  organizationId String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  status         EventStatus       @default(PENDING)
  startTime      DateTime?
  endTime        DateTime?
  type           String?
  // Reminder system fields
  reminderSent   Boolean           @default(false)
  reminderSentAt DateTime?
  confirmationRequired Boolean     @default(false)
  confirmationDeadline DateTime?
  confirmedAt    DateTime?
  client         Client?           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  coach          User              @relation("CoachEvents", fields: [coachId], references: [id], onDelete: Cascade)
  organization   Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  swapRequestsAsRequester TimeSwapRequest[] @relation("SwapRequesterEvent")
  swapRequestsAsTarget    TimeSwapRequest[] @relation("SwapTargetEvent")
  reminders      LessonReminder[]

  @@map("events")
}

model Progress {
  id        String   @id @default(cuid())
  clientId  String
  coachId   String
  skill     String
  progress  Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    User     @relation("ClientProgress", fields: [clientId], references: [id], onDelete: Cascade)
  coach     User     @relation("CoachProgress", fields: [coachId], references: [id], onDelete: Cascade)

  @@map("progress")
}

model VideoAssignment {
  id             String          @id @default(cuid())
  videoId        String
  clientId       String
  assignedAt     DateTime        @default(now())
  dueDate        DateTime?
  notes          String?
  completed      Boolean         @default(false)
  completedAt    DateTime?
  scheduledDayId String?
  client         User            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  scheduledDay   ScheduledDay?   @relation(fields: [scheduledDayId], references: [id])
  video          LibraryResource @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, clientId])
  @@map("video_assignments")
}

model WorkoutTemplate {
  id               String            @id @default(cuid())
  title            String
  description      String?
  exercises        Json
  duration         String?
  difficulty       String?
  category         String?
  coachId          String
  isTemplate       Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  assignedWorkouts AssignedWorkout[]
  scheduledDays    ScheduledDay[]
  coach            User              @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@map("workout_templates")
}

model AssignedWorkout {
  id                String           @id @default(cuid())
  clientId          String
  coachId           String
  workoutTemplateId String?
  title             String
  description       String?
  exercises         Json
  duration          String?
  scheduledDate     DateTime
  completed         Boolean          @default(false)
  completedAt       DateTime?
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  client            User             @relation("ClientAssignedWorkouts", fields: [clientId], references: [id], onDelete: Cascade)
  coach             User             @relation("CoachAssignedWorkouts", fields: [coachId], references: [id], onDelete: Cascade)
  template          WorkoutTemplate? @relation(fields: [workoutTemplateId], references: [id])

  @@map("assigned_workouts")
}

model WeeklySchedule {
  id        String         @id @default(cuid())
  clientId  String
  coachId   String
  weekStart DateTime
  weekEnd   DateTime
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  days      ScheduledDay[]
  client    User           @relation("ClientWeeklySchedules", fields: [clientId], references: [id], onDelete: Cascade)
  coach     User           @relation("CoachWeeklySchedules", fields: [coachId], references: [id], onDelete: Cascade)

  @@unique([clientId, coachId, weekStart])
  @@map("weekly_schedules")
}

model ScheduledDay {
  id                String            @id @default(cuid())
  weeklyScheduleId  String
  dayOfWeek         Int
  workoutTemplateId String?
  title             String
  description       String?
  exercises         Json?
  duration          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  weeklySchedule    WeeklySchedule    @relation(fields: [weeklyScheduleId], references: [id], onDelete: Cascade)
  workoutTemplate   WorkoutTemplate?  @relation(fields: [workoutTemplateId], references: [id])
  videoAssignments  VideoAssignment[]

  @@map("scheduled_days")
}

model Program {
  id           String                  @id @default(cuid())
  title        String
  description  String?
  sport        String?
  level        String
  status       ProgramStatus           @default(DRAFT)
  duration     Int
  coachId      String
  organizationId String?              @map("organization_id")
  sharedWithOrg Boolean               @default(false) @map("shared_with_org")
  createdByCoachId String?            @map("created_by_coach_id")
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  assignments  ProgramAssignment[]
  replacements ProgramDayReplacement[]
  weeks        ProgramWeek[]
  coach        User                    @relation("CoachPrograms", fields: [coachId], references: [id], onDelete: Cascade)
  organization Organization?           @relation("SharedPrograms", fields: [organizationId], references: [id])
  createdByCoach User?                 @relation("CreatedPrograms", fields: [createdByCoachId], references: [id])

  @@map("programs")
}

model ProgramWeek {
  id          String       @id @default(cuid())
  weekNumber  Int
  title       String
  description String?
  programId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  days        ProgramDay[]
  program     Program      @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@map("program_weeks")
}

model ProgramDay {
  id                String         @id @default(cuid())
  dayNumber         Int
  title             String
  description       String?
  weekId            String
  isRestDay         Boolean        @default(false)
  warmupTitle       String?
  warmupDescription String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  week              ProgramWeek    @relation(fields: [weekId], references: [id], onDelete: Cascade)
  drills            ProgramDrill[]

  @@map("program_days")
}

model ProgramDrill {
  id                     String                  @id @default(cuid())
  order                  Int
  title                  String
  description            String?
  duration               String?
  videoUrl               String?
  notes                  String?
  dayId                  String
  sets                   Int?
  reps                   Int?
  tempo                  String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  videoId                String?
  videoThumbnail         String?
  videoTitle             String?
  type                   String?
  routineId              String?
  supersetId             String?
  supersetOrder          Int?
  // Superset description fields (only populated for first exercise in superset)
  supersetDescription    String?
  supersetInstructions   String?
  supersetNotes          String?
  // Coach Instructions fields
  coachInstructionsWhatToDo String?
  coachInstructionsHowToDoIt String?
  coachInstructionsKeyPoints String[] @default([])
  coachInstructionsCommonMistakes String[] @default([])
  coachInstructionsEasier String?
  coachInstructionsHarder String?
  coachInstructionsEquipment String?
  coachInstructionsSetup String?
  clientVideoSubmissions ClientVideoSubmission[]
  completions            DrillCompletion[]
  programDrillCompletions ProgramDrillCompletion[]
  day                    ProgramDay              @relation(fields: [dayId], references: [id], onDelete: Cascade)
  routine                Routine?                 @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@map("program_drills")
}

model DrillCompletion {
  id          String       @id @default(cuid())
  drillId     String
  clientId    String
  completedAt DateTime     @default(now())
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  drill       ProgramDrill @relation(fields: [drillId], references: [id], onDelete: Cascade)

  @@unique([drillId, clientId, completedAt])
  @@map("drill_completions")
}

model ClientAnalytics {
  id                     String    @id @default(cuid())
  clientId               String    @unique
  coachId                String
  totalDrillsCompleted   Int       @default(0)
  totalWorkoutsCompleted Int       @default(0)
  totalProgramsCompleted Int       @default(0)
  averageCompletionRate  Float     @default(0.0)
  lastActivityDate       DateTime?
  streakDays             Int       @default(0)
  longestStreak          Int       @default(0)
  totalActiveDays        Int       @default(0)
  firstWorkoutDate       DateTime?
  daysSinceFirstWorkout  Int       @default(0)
  isActive               Boolean   @default(true)
  lastLoginDate          DateTime?
  averageWorkoutTime     Float?
  preferredWorkoutTime   String?
  mostActiveDay          String?
  currentProgramId       String?
  programStartDate       DateTime?
  programProgress        Float     @default(0.0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  client                 Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  coach                  User      @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@map("client_analytics")
}

model CoachAnalytics {
  id                      String   @id @default(cuid())
  coachId                 String   @unique
  totalClients            Int      @default(0)
  activeClients           Int      @default(0)
  newClientsThisMonth     Int      @default(0)
  churnedClients          Int      @default(0)
  averageClientEngagement Float    @default(0.0)
  totalDrillsAssigned     Int      @default(0)
  totalDrillsCompleted    Int      @default(0)
  overallCompletionRate   Float    @default(0.0)
  averageClientRetention  Float    @default(0.0)
  clientRetentionRate     Float    @default(0.0)
  totalProgramsCreated    Int      @default(0)
  totalWorkoutsAssigned   Int      @default(0)
  averageProgramDuration  Float    @default(0.0)
  monthlyRecurringRevenue Float?   @default(0.0)
  averageClientValue      Float?   @default(0.0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  coach                   User     @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@map("coach_analytics")
}

model ClientVideoSubmission {
  id          String        @id @default(cuid())
  clientId    String
  coachId     String
  drillId     String?
  title       String
  description String?
  videoUrl    String
  thumbnail   String?
  category    String?
  difficulty  String?
  isPublic    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comment     String?
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  coach       User          @relation("CoachVideoSubmissions", fields: [coachId], references: [id], onDelete: Cascade)
  drill       ProgramDrill? @relation(fields: [drillId], references: [id])

  @@map("client_video_submissions")
}

model ProgramAssignment {
  id           String                  @id @default(cuid())
  programId    String
  clientId     String
  assignedAt   DateTime                @default(now())
  startDate    DateTime?
  completed    Boolean                 @default(false)
  completedAt  DateTime?
  progress     Int                     @default(0)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  currentCycle Int                     @default(1)
  repetitions  Int                     @default(1)
  client       Client                  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  program      Program                 @relation(fields: [programId], references: [id], onDelete: Cascade)
  replacements ProgramDayReplacement[]
  drillCompletions ProgramDrillCompletion[]

  @@unique([programId, clientId, currentCycle])
  @@map("program_assignments")
}

model Routine {
  id          String              @id @default(cuid())
  name        String
  description String?
  coachId     String
  organizationId String?         @map("organization_id")
  sharedWithOrg Boolean          @default(false) @map("shared_with_org")
  createdByCoachId String?       @map("created_by_coach_id")
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  assignments RoutineAssignment[]
  exercises   RoutineExercise[]
  programDrills ProgramDrill[]
  coach       User                @relation("CoachRoutines", fields: [coachId], references: [id], onDelete: Cascade)
  organization Organization?      @relation("SharedRoutines", fields: [organizationId], references: [id])
  createdByCoach User?            @relation("CreatedRoutines", fields: [createdByCoachId], references: [id])

  @@map("routines")
}

model RoutineExercise {
  id             String   @id @default(cuid())
  order          Int
  title          String
  description    String?
  type           String?
  notes          String?
  sets           Int?
  reps           Int?
  tempo          String?
  duration       String?
  routineId      String
  videoId        String?
  videoTitle     String?
  videoThumbnail String?
  videoUrl       String?
  // Superset fields
  supersetId             String?
  supersetOrder          Int?
  supersetDescription    String?
  supersetInstructions   String?
  supersetNotes          String?
  // Coach Instructions fields
  coachInstructionsWhatToDo String?
  coachInstructionsHowToDoIt String?
  coachInstructionsKeyPoints String[] @default([])
  coachInstructionsCommonMistakes String[] @default([])
  coachInstructionsEasier String?
  coachInstructionsHarder String?
  coachInstructionsEquipment String?
  coachInstructionsSetup String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  routine        Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@map("routine_exercises")
}

model RoutineAssignment {
  id          String    @id @default(cuid())
  routineId   String
  clientId    String
  assignedAt  DateTime  @default(now())
  startDate   DateTime?
  completedAt DateTime?
  progress    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  client      Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  routine     Routine   @relation(fields: [routineId], references: [id], onDelete: Cascade)
  completions RoutineExerciseCompletion[]

  @@map("routine_assignments")
}

model RoutineExerciseCompletion {
  id                   String            @id @default(cuid())
  routineAssignmentId  String
  exerciseId          String
  clientId            String
  completedAt         DateTime           @default(now())
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  client              Client             @relation("ClientRoutineExerciseCompletions", fields: [clientId], references: [id], onDelete: Cascade)
  routineAssignment   RoutineAssignment  @relation(fields: [routineAssignmentId], references: [id], onDelete: Cascade)

  @@unique([routineAssignmentId, exerciseId, clientId, completedAt])
  @@map("routine_exercise_completions")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model UserInbox {
  userId             String   @id
  totalUnread        Int      @default(0)
  totalNotifications Int      @default(0)
  updatedAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserInbox")
}

model UserSettings {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  phone                  String?
  location               String?
  bio                    String?
  avatarUrl              String?
  emailNotifications     Boolean  @default(true)
  pushNotifications      Boolean  @default(true)
  soundNotifications     Boolean  @default(false)
  newClientNotifications Boolean  @default(true)
  messageNotifications   Boolean  @default(true)
  scheduleNotifications  Boolean  @default(true)
  defaultWelcomeMessage  String?
  messageRetentionDays   Int      @default(90)
  maxFileSizeMB          Int      @default(50)
  defaultLessonDuration  Int      @default(60)
  autoArchiveDays        Int      @default(90)
  requireClientEmail     Boolean  @default(false)
  timezone               String   @default("UTC-5")
  workingDays            Json     @default("[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]")
  twoFactorEnabled       Boolean  @default(false)
  theme                  String   @default("dark")
  compactSidebar         Boolean  @default(false)
  showAnimations         Boolean  @default(true)
  analyticsGoals         Json?    @default("{\"activeClients\": 20, \"clientRetention\": 90, \"programProgress\": 75, \"workoutCompletion\": 85}")
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Video {
  id               String            @id @default(cuid())
  title            String
  description      String?
  url              String
  thumbnail        String?
  duration         Int?
  fileSize         Int?
  uploadedBy       String
  clientId         String?
  category         VideoCategory     @default(BULLPEN)
  status           VideoStatus       @default(PENDING_REVIEW)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  screenRecordings ScreenRecording[]
  annotations      VideoAnnotation[]
  audioNotes       VideoAudioNote[]
  feedback         VideoFeedback[]
  client           Client?           @relation(fields: [clientId], references: [id])
  uploader         User              @relation("UserVideos", fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([uploadedBy])
  @@index([clientId])
  @@index([status])
  @@index([category])
  @@map("videos")
}

model VideoFeedback {
  id        String   @id @default(cuid())
  videoId   String
  coachId   String
  feedback  String
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coach     User     @relation("CoachVideoFeedback", fields: [coachId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([coachId])
  @@map("video_feedback")
}

model VideoAnnotation {
  id        String         @id @default(cuid())
  videoId   String
  coachId   String
  type      AnnotationType
  data      Json
  timestamp Float
  duration  Float?
  createdAt DateTime       @default(now())
  coach     User           @relation("CoachVideoAnnotations", fields: [coachId], references: [id], onDelete: Cascade)
  video     Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([coachId])
  @@map("video_annotations")
}

model VideoAudioNote {
  id        String   @id @default(cuid())
  videoId   String
  coachId   String
  url       String
  duration  Float
  timestamp Float
  title     String?
  createdAt DateTime @default(now())
  coach     User     @relation("CoachVideoAudioNotes", fields: [coachId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([coachId])
  @@map("video_audio_notes")
}

model ScreenRecording {
  id          String          @id @default(cuid())
  videoId     String
  coachId     String
  title       String
  description String?
  videoUrl    String
  audioUrl    String
  duration    Float
  maxDuration Float
  annotations Json?
  status      RecordingStatus @default(PROCESSING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  coach       User            @relation("CoachScreenRecordings", fields: [coachId], references: [id], onDelete: Cascade)
  video       Video           @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([coachId])
  @@map("screen_recordings")
}

model AdminAuditLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  action    String
  details   String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_audit_logs")
}

model ProgramDayReplacement {
  id                String            @id @default(cuid())
  assignmentId      String
  programId         String
  clientId          String
  coachId           String
  replacedDate      DateTime
  lessonId          String
  replacementReason String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  assignment        ProgramAssignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  client            Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  coach             User              @relation(fields: [coachId], references: [id], onDelete: Cascade)
  program           Program           @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([assignmentId, replacedDate])
  @@map("program_day_replacements")
}

model ProgramDrillCompletion {
  id                   String            @id @default(cuid())
  drillId              String
  programAssignmentId  String
  clientId             String
  completedAt          DateTime           @default(now())
  notes                String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  client                Client            @relation("ClientProgramDrillCompletions", fields: [clientId], references: [id], onDelete: Cascade)
  programAssignment     ProgramAssignment @relation(fields: [programAssignmentId], references: [id], onDelete: Cascade)
  drill                 ProgramDrill      @relation(fields: [drillId], references: [id], onDelete: Cascade)

  @@unique([drillId, programAssignmentId])
  @@map("program_drill_completions")
}

model TimeSwapRequest {
  id               String     @id @default(cuid())
  requesterId      String
  targetId         String
  requesterEventId String
  targetEventId    String
  status           SwapStatus @default(PENDING)
  message          String     @default("Hey, could we switch times this week?")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  approvedAt       DateTime?
  requesterEvent   Event      @relation("SwapRequesterEvent", fields: [requesterEventId], references: [id], onDelete: Cascade)
  requester        Client     @relation("SwapRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  targetEvent      Event      @relation("SwapTargetEvent", fields: [targetEventId], references: [id], onDelete: Cascade)
  target           Client     @relation("SwapTarget", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([requesterId, targetId, requesterEventId, targetEventId])
  @@map("time_swap_requests")
}

model LessonReminder {
  id                String            @id @default(cuid())
  eventId           String
  clientId          String
  coachId           String
  reminderType      ReminderType
  sentAt            DateTime          @default(now())
  confirmationToken String            @unique
  expiresAt         DateTime
  confirmedAt       DateTime?
  status            ReminderStatus    @default(SENT)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  event             Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  client            Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  coach             User              @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@map("lesson_reminders")
}

model AccountDeletionLog {
  id        String   @id @default(cuid())
  userId    String
  userEmail String
  reason    String?
  deletedAt DateTime @default(now())
  userAgent String?
  createdAt DateTime @default(now())

  @@map("account_deletion_logs")
}

enum UserRole {
  COACH
  CLIENT
}

enum NotificationType {
  MESSAGE
  WORKOUT_ASSIGNED
  WORKOUT_COMPLETED
  LESSON_SCHEDULED
  LESSON_CANCELLED
  PROGRAM_ASSIGNED
  PROGRESS_UPDATE
  SYSTEM
  CLIENT_JOIN_REQUEST
  SCHEDULE_REQUEST
  ORGANIZATION_INVITATION
}

enum ProgramStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum EventStatus {
  PENDING
  CONFIRMED
  DECLINED
  CANCELLED
}

enum ReminderType {
  LESSON_REMINDER
  CONFIRMATION_REQUIRED
}

enum ReminderStatus {
  SENT
  CONFIRMED
  EXPIRED
  CANCELLED
}

enum ConversationType {
  COACH_CLIENT
  CLIENT_CLIENT
}

enum DominantHand {
  RIGHT
  LEFT
}

enum MovementStyle {
  AIRPLANE
  HELICOPTER
}

enum ReachingAbility {
  REACHER
  NON_REACHER
}

enum VideoCategory {
  BULLPEN
  PRACTICE
  GAME_FOOTAGE
  REFERENCE
  COMPARISON
  OTHER
}

enum VideoStatus {
  PENDING_REVIEW
  REVIEWED
  ARCHIVED
}

enum AnnotationType {
  PEN
  HIGHLIGHT
  ARROW
  CIRCLE
  TEXT
  ERASE
}

enum RecordingStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum SwapStatus {
  PENDING
  APPROVED
  DECLINED
  EXPIRED
}

// Organization Models
model Organization {
  id                String   @id @default(cuid())
  name              String
  description       String?
  tier              OrganizationTier @default(SOLO)
  coachLimit        Int      @default(1) @map("coach_limit")
  clientLimit       Int      @default(50) @map("client_limit")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  ownerId           String   @unique @map("owner_id")
  
  // Relationships
  owner             User     @relation("OrganizationOwner", fields: [ownerId], references: [id])
  coaches           User[]   @relation("OrganizationCoaches")
  clients           Client[] @relation("OrganizationClients")
  sharedPrograms    Program[] @relation("SharedPrograms")
  sharedRoutines    Routine[] @relation("SharedRoutines")
  coachOrganizations CoachOrganization[] @relation("CoachOrganizationMembers")
  events            Event[]
  
  @@map("organizations")
}

model CoachOrganization {
  id             String   @id @default(cuid())
  coachId        String   @map("coach_id")
  organizationId String   @map("organization_id")
  role           CoachRole @default(COACH)
  joinedAt       DateTime @default(now())
  isActive       Boolean  @default(true)
  
  // Relationships
  coach          User         @relation("CoachOrganizations", fields: [coachId], references: [id])
  organization   Organization @relation("CoachOrganizationMembers", fields: [organizationId], references: [id])
  
  @@unique([coachId, organizationId])
  @@map("coach_organizations")
}

model ClientCoachAssignment {
  id             String   @id @default(cuid())
  clientId       String   @map("client_id")
  coachId        String   @map("coach_id")
  assignedBy     String   @map("assigned_by")
  assignedAt     DateTime @default(now())
  isActive       Boolean  @default(true)
  role           AssignmentRole @default(ASSISTANT)
  
  // Relationships
  client         Client   @relation("ClientCoachAssignments", fields: [clientId], references: [id])
  coach          User     @relation("CoachClientAssignments", fields: [coachId], references: [id])
  assigner       User     @relation("AssignedBy", fields: [assignedBy], references: [id])
  
  @@unique([clientId, coachId])
  @@map("client_coach_assignments")
}

// Organization Enums
enum OrganizationTier {
  SOLO    // 1 coach, 50 clients
  TEAM    // 5 coaches, 250 clients  
  CLUB    // 10 coaches, 500 clients
  ACADEMY // 20 coaches, 1000 clients
}

enum CoachRole {
  OWNER   // Can manage organization, invite coaches, see all data
  ADMIN   // Can manage coaches and clients, see all data
  COACH   // Can manage assigned clients, see shared resources
}

enum AssignmentRole {
  PRIMARY    // Main coach responsible for client
  ASSISTANT  // Secondary coach helping with client
  OBSERVER   // Coach who can view but not modify client data
}
