"use client";

import React, { useState } from "react";
import { trpc } from "@/app/_trpc/client";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Building2,
  Users,
  UserCheck,
  Calendar,
  Plus,
  Share2,
  Settings,
  Crown,
  Shield,
  User,
  Home,
  Users as UsersIcon,
  FileText,
  UserPlus,
  BarChart3,
  ChevronRight,
} from "lucide-react";
import { toast } from "sonner";
import OrganizationCreateModal from "./OrganizationCreateModal";
import OrganizationInviteModal from "./OrganizationInviteModal";
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
} from "@/components/ui/navigation-menu";

const TIER_COLORS = {
  SOLO: "bg-blue-100 text-blue-800",
  TEAM: "bg-green-100 text-green-800",
  CLUB: "bg-purple-100 text-purple-800",
  ACADEMY: "bg-gold-100 text-gold-800",
};

const ROLE_ICONS = {
  OWNER: Crown,
  ADMIN: Shield,
  COACH: User,
};

// Organization view types
type OrganizationView = "overview" | "team" | "resources" | "clients" | "analytics" | "settings";

export default function OrganizationDashboard() {
  const [currentView, setCurrentView] = useState<OrganizationView>("overview");
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showInviteModal, setShowInviteModal] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editFormData, setEditFormData] = useState({
    name: "",
    description: "",
  });

  // Get current user
  const { data: currentUser } = trpc.user.getProfile.useQuery();

  const {
    data: organization,
    isLoading,
    refetch,
  } = trpc.organization.get.useQuery({});
  const { data: sharedResources } =
    trpc.organization.getSharedResources.useQuery({});
  const {
    data: pendingInvitations = [],
    refetch: refetchInvitations,
    isLoading: isLoadingInvitations,
  } = trpc.organization.getPendingInvitations.useQuery(undefined, {
    refetchOnMount: true,
    refetchOnWindowFocus: true,
  });
  const { data: allInvitations = [], refetch: refetchAllInvitations } =
    trpc.organization.getOrganizationInvitations.useQuery(
      { organizationId: organization?.id || "" },
      { enabled: !!organization }
    );

  console.log("Pending invitations:", pendingInvitations);
  console.log("Loading invitations:", isLoadingInvitations);

  // Accept invitation mutation
  const acceptInvitationMutation =
    trpc.organization.acceptInvitation.useMutation({
      onSuccess: async () => {
        toast.success("Invitation accepted!");
        await refetch();
        await refetchInvitations();
      },
      onError: (error: { message?: string }) => {
        toast.error(error.message || "Failed to accept invitation");
      },
    });

  // Decline invitation mutation
  const declineInvitationMutation =
    trpc.organization.declineInvitation.useMutation({
      onSuccess: async () => {
        toast.success("Invitation declined");
        await refetchInvitations();
      },
      onError: (error: { message?: string }) => {
        toast.error(error.message || "Failed to decline invitation");
      },
    });

  const handleAcceptInvitation = (organizationId: string) => {
    acceptInvitationMutation.mutate({ organizationId });
  };

  const handleDeclineInvitation = (organizationId: string) => {
    declineInvitationMutation.mutate({ organizationId });
  };

  // Resend invitation mutation
  const resendInvitationMutation =
    trpc.organization.resendInvitation.useMutation({
      onSuccess: async () => {
        toast.success("Invitation resent!");
        await refetchAllInvitations();
      },
      onError: (error: { message?: string }) => {
        toast.error(error.message || "Failed to resend invitation");
      },
    });

  // Cancel invitation mutation
  const cancelInvitationMutation =
    trpc.organization.cancelInvitation.useMutation({
      onSuccess: async () => {
        toast.success("Invitation cancelled");
        await refetchAllInvitations();
      },
      onError: (error: { message?: string }) => {
        toast.error(error.message || "Failed to cancel invitation");
      },
    });

  const handleResendInvitation = (invitationId: string) => {
    resendInvitationMutation.mutate({ invitationId });
  };

  const handleCancelInvitation = (invitationId: string) => {
    if (confirm("Are you sure you want to cancel this invitation?")) {
      cancelInvitationMutation.mutate({ invitationId });
    }
  };

  // Leave organization mutation
  const leaveOrganizationMutation =
    trpc.organization.leaveOrganization.useMutation({
      onSuccess: async () => {
        toast.success("You have left the organization");
        await refetch();
      },
      onError: (error: { message?: string }) => {
        toast.error(error.message || "Failed to leave organization");
      },
    });

  const handleLeaveOrganization = () => {
    if (
      confirm(
        "Are you sure you want to leave this organization? You will lose access to shared resources and collaboration features."
      )
    ) {
      if (organization) {
        leaveOrganizationMutation.mutate({ organizationId: organization.id });
      }
    }
  };

  // Update organization mutation
  const updateOrganizationMutation = trpc.organization.update.useMutation({
    onSuccess: async () => {
      toast.success("Organization updated successfully!");
      setIsEditing(false);
      await refetch();
    },
    onError: (error: { message?: string }) => {
      toast.error(error.message || "Failed to update organization");
    },
  });

  const handleEditClick = () => {
    if (organization) {
      setEditFormData({
        name: organization.name,
        description: organization.description || "",
      });
      setIsEditing(true);
    }
  };

  const handleSaveEdit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!organization) return;

    updateOrganizationMutation.mutate({
      organizationId: organization.id,
      name: editFormData.name.trim(),
      description: editFormData.description.trim() || undefined,
    });
  };

  const handleCancelEdit = () => {
    setIsEditing(false);
    setEditFormData({ name: "", description: "" });
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading organization...</p>
        </div>
      </div>
    );
  }

  if (!organization) {
    return (
      <div className="max-w-4xl mx-auto p-6 space-y-6">
        {/* Pending Invitations */}
        {pendingInvitations.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>Pending Invitations</CardTitle>
              <CardDescription>
                You have been invited to join these organizations
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {pendingInvitations.map(invitation => (
                  <div
                    key={invitation.id}
                    className="flex items-center justify-between p-4 border rounded-lg"
                  >
                    <div>
                      <h4 className="font-medium">
                        {invitation.organization.name}
                      </h4>
                      {invitation.organization.description && (
                        <p className="text-sm text-muted-foreground">
                          {invitation.organization.description}
                        </p>
                      )}
                      <Badge className="mt-2">
                        {invitation.organization.tier}
                      </Badge>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        onClick={() =>
                          handleAcceptInvitation(invitation.organization.id)
                        }
                        disabled={
                          acceptInvitationMutation.isPending ||
                          declineInvitationMutation.isPending
                        }
                      >
                        Accept
                      </Button>
                      <Button
                        variant="outline"
                        onClick={() =>
                          handleDeclineInvitation(invitation.organization.id)
                        }
                        disabled={
                          acceptInvitationMutation.isPending ||
                          declineInvitationMutation.isPending
                        }
                      >
                        Decline
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Create Organization */}
        <Card className="text-center">
          <CardHeader>
            <CardTitle className="flex items-center justify-center gap-2">
              <Building2 className="h-6 w-6" />
              Create Your Organization
            </CardTitle>
            <CardDescription>
              Set up your coaching organization to collaborate with other
              coaches, share resources, and manage clients together.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button onClick={() => setShowCreateModal(true)} size="lg">
              <Plus className="mr-2 h-4 w-4" />
              Create Organization
            </Button>
          </CardContent>
        </Card>

        <OrganizationCreateModal
          isOpen={showCreateModal}
          onClose={() => setShowCreateModal(false)}
          onSuccess={() => refetch()}
        />
      </div>
    );
  }

  const currentUserMembership = organization.coaches.find(
    c => c.id === currentUser?.id
  )?.coachOrganizations[0];
  const userRole = currentUserMembership?.role || "COACH";
  const canInviteCoaches = userRole === "OWNER" || userRole === "ADMIN";
  const canManageOrganization = userRole === "OWNER";
  const canLeaveOrganization = userRole !== "OWNER";

  // Navigation items for organization views
  const navigationItems = [
    { id: "overview", label: "Overview", icon: Home },
    { id: "team", label: "Team", icon: UsersIcon },
    { id: "resources", label: "Resources", icon: FileText },
    { id: "clients", label: "Clients", icon: UserCheck },
    { id: "analytics", label: "Analytics", icon: BarChart3 },
    { id: "settings", label: "Settings", icon: Settings },
  ];

  // Render different views based on current selection
  const renderCurrentView = () => {
    switch (currentView) {
      case "overview":
        return <OrganizationOverview organization={organization} sharedResources={sharedResources} />;
      case "team":
        return <OrganizationTeam organization={organization} allInvitations={allInvitations} />;
      case "resources":
        return <OrganizationResources organization={organization} sharedResources={sharedResources} />;
      case "clients":
        return <OrganizationClients organization={organization} />;
      case "analytics":
        return <OrganizationAnalytics organization={organization} />;
      case "settings":
        return <OrganizationSettings organization={organization} />;
      default:
        return <OrganizationOverview organization={organization} sharedResources={sharedResources} />;
    }
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Organization Header */}
      <div className="border-b bg-card">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            {!isEditing ? (
              <>
                <div>
                  <h1 className="text-3xl font-bold flex items-center gap-2">
                    <Building2 className="h-8 w-8" />
                    {organization?.name}
                  </h1>
                  {organization?.description && (
                    <p className="text-muted-foreground mt-1">
                      {organization.description}
                    </p>
                  )}
                  <div className="flex items-center gap-2 mt-2">
                    <Badge className={TIER_COLORS[organization?.tier || "SOLO"]}>
                      {organization?.tier}
                    </Badge>
                    <span className="text-sm text-muted-foreground">
                      {organization?._count.coaches} / {organization?.coachLimit}{" "}
                      coaches
                    </span>
                    <span className="text-sm text-muted-foreground">
                      • {organization?._count.clients} / {organization?.clientLimit}{" "}
                      clients
                    </span>
                  </div>
                </div>

                <div className="flex gap-2">
                  {canManageOrganization && (
                    <Button variant="outline" onClick={handleEditClick}>
                      <Settings className="mr-2 h-4 w-4" />
                      Edit Organization
                    </Button>
                  )}
                  {canInviteCoaches && (
                    <Button onClick={() => setShowInviteModal(true)}>
                      <Plus className="mr-2 h-4 w-4" />
                      Invite Coach
                    </Button>
                  )}
                  {canManageOrganization && (
                    <Button
                      variant="outline"
                      onClick={() => setShowCreateModal(true)}
                    >
                      Upgrade Plan
                    </Button>
                  )}
                  {canLeaveOrganization && (
                    <Button
                      variant="destructive"
                      onClick={handleLeaveOrganization}
                      disabled={leaveOrganizationMutation.isPending}
                    >
                      Leave Organization
                    </Button>
                  )}
                </div>
              </>
            ) : (
              <form onSubmit={handleSaveEdit} className="flex-1 space-y-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Organization Name</label>
                  <input
                    type="text"
                    value={editFormData.name}
                    onChange={e =>
                      setEditFormData({ ...editFormData, name: e.target.value })
                    }
                    className="w-full px-3 py-2 border rounded-lg bg-background"
                    disabled={updateOrganizationMutation.isPending}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">Description</label>
                  <textarea
                    value={editFormData.description}
                    onChange={e =>
                      setEditFormData({
                        ...editFormData,
                        description: e.target.value,
                      })
                    }
                    className="w-full px-3 py-2 border rounded-lg bg-background"
                    rows={3}
                    disabled={updateOrganizationMutation.isPending}
                  />
                </div>
                <div className="flex gap-2">
                  <Button
                    type="submit"
                    disabled={updateOrganizationMutation.isPending}
                  >
                    Save Changes
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handleCancelEdit}
                    disabled={updateOrganizationMutation.isPending}
                  >
                    Cancel
                  </Button>
                </div>
              </form>
            )}
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="border-b">
        <div className="max-w-7xl mx-auto px-6">
          <NavigationMenu className="py-2">
            <NavigationMenuList>
              {navigationItems.map((item) => (
                <NavigationMenuItem key={item.id}>
                  <Button
                    variant={currentView === item.id ? "default" : "ghost"}
                    onClick={() => setCurrentView(item.id as OrganizationView)}
                    className="gap-2"
                  >
                    <item.icon className="h-4 w-4" />
                    {item.label}
                  </Button>
                </NavigationMenuItem>
              ))}
            </NavigationMenuList>
          </NavigationMenu>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto p-6">
        {renderCurrentView()}
      </div>

      {/* Modals */}
      <OrganizationCreateModal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        onSuccess={() => refetch()}
      />

      <OrganizationInviteModal
        isOpen={showInviteModal}
        onClose={() => setShowInviteModal(false)}
        organizationId={organization?.id || ""}
        organizationName={organization?.name || ""}
        onSuccess={() => refetch()}
      />
    </div>
  );
}

// Organization view components
function OrganizationOverview({ organization, sharedResources }: {
  organization: any;
  sharedResources: any;
}) {
  return (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Coaches</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {organization?._count.coaches}
            </div>
            <p className="text-xs text-muted-foreground">
              Max: {organization?.coachLimit}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Clients</CardTitle>
            <UserCheck className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {organization?._count.clients}
            </div>
            <p className="text-xs text-muted-foreground">
              Max: {organization?.clientLimit}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Shared Programs
            </CardTitle>
            <Share2 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {sharedResources?.programs?.length || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              Available to all coaches
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Shared Routines
            </CardTitle>
            <Calendar className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {sharedResources?.routines?.length || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              Available to all coaches
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Recent Activity or Overview Cards */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Organization Members</CardTitle>
            <CardDescription>
              Coaches in your organization and their roles
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {organization?.coaches.slice(0, 5).map((coach: any) => {
                const role = coach.coachOrganizations[0]?.role || "COACH";
                const RoleIcon = role === "OWNER" ? Crown : role === "ADMIN" ? Shield : User;

                return (
                  <div
                    key={coach.id}
                    className="flex items-center justify-between p-3 border rounded-lg"
                  >
                    <div className="flex items-center gap-3">
                      <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
                        <User className="h-5 w-5 text-primary" />
                      </div>
                      <div>
                        <p className="font-medium">{coach.name || "Unknown"}</p>
                        <p className="text-sm text-muted-foreground">{coach.email}</p>
                      </div>
                    </div>
                    <Badge variant="outline" className="flex items-center gap-1">
                      <RoleIcon className="h-3 w-3" />
                      {role}
                    </Badge>
                  </div>
                );
              })}
              {organization?.coaches.length > 5 && (
                <p className="text-sm text-muted-foreground text-center">
                  +{organization.coaches.length - 5} more members
                </p>
              )}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Shared Resources</CardTitle>
            <CardDescription>
              Programs and routines shared across the organization
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {sharedResources?.programs && sharedResources.programs.length > 0 && (
                <div>
                  <h4 className="font-medium mb-2">
                    Programs ({sharedResources.programs.length})
                  </h4>
                  <div className="space-y-2">
                    {sharedResources.programs.slice(0, 3).map((program: any) => (
                      <div key={program.id} className="p-3 border rounded-lg">
                        <p className="font-medium">{program.title}</p>
                        <p className="text-sm text-muted-foreground">
                          Created by {program.createdByCoach?.name || "Unknown"}
                        </p>
                      </div>
                    ))}
                    {sharedResources.programs.length > 3 && (
                      <p className="text-sm text-muted-foreground text-center">
                        +{sharedResources.programs.length - 3} more programs
                      </p>
                    )}
                  </div>
                </div>
              )}

              {sharedResources?.routines && sharedResources.routines.length > 0 && (
                <div>
                  <h4 className="font-medium mb-2">
                    Routines ({sharedResources.routines.length})
                  </h4>
                  <div className="space-y-2">
                    {sharedResources.routines.slice(0, 3).map((routine: any) => (
                      <div key={routine.id} className="p-3 border rounded-lg">
                        <p className="font-medium">{routine.name}</p>
                        <p className="text-sm text-muted-foreground">
                          Created by {routine.createdByCoach?.name || "Unknown"}
                        </p>
                      </div>
                    ))}
                    {sharedResources.routines.length > 3 && (
                      <p className="text-sm text-muted-foreground text-center">
                        +{sharedResources.routines.length - 3} more routines
                      </p>
                    )}
                  </div>
                </div>
              )}

              {(!sharedResources?.programs || sharedResources.programs.length === 0) &&
               (!sharedResources?.routines || sharedResources.routines.length === 0) && (
                <p className="text-muted-foreground text-center py-8">
                  No shared resources yet. Start sharing programs and routines with your team!
                </p>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

function OrganizationTeam({ organization, allInvitations }: {
  organization: any;
  allInvitations: any;
}) {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Organization Members</CardTitle>
          <CardDescription>
            Coaches in your organization and their roles
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {organization?.coaches.map((coach: any) => {
              const role = coach.coachOrganizations[0]?.role || "COACH";
              const RoleIcon = role === "OWNER" ? Crown : role === "ADMIN" ? Shield : User;

              return (
                <div
                  key={coach.id}
                  className="flex items-center justify-between p-3 border rounded-lg"
                >
                  <div className="flex items-center gap-3">
                    <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
                      <User className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <p className="font-medium">{coach.name || "Unknown"}</p>
                      <p className="text-sm text-muted-foreground">{coach.email}</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge variant="outline" className="flex items-center gap-1">
                      <RoleIcon className="h-3 w-3" />
                      {role}
                    </Badge>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {allInvitations && allInvitations.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Invitation Management</CardTitle>
            <CardDescription>
              View and manage all invitations sent to coaches
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {allInvitations.map((invitation: any) => (
                <div
                  key={invitation.id}
                  className="flex items-center justify-between p-3 border rounded-lg"
                >
                  <div className="flex items-center gap-3">
                    <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
                      <User className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <p className="font-medium">
                        {invitation.coach.name || "Unknown"}
                      </p>
                      <p className="text-sm text-muted-foreground">
                        {invitation.coach.email}
                      </p>
                      <p className="text-xs text-muted-foreground mt-1">
                        Invited{" "}
                        {new Date(invitation.joinedAt).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge
                      variant={invitation.isActive ? "default" : "outline"}
                      className="flex items-center gap-1"
                    >
                      {invitation.isActive ? "Active" : "Pending"}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

function OrganizationResources({ organization, sharedResources }: {
  organization: any;
  sharedResources: any;
}) {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Shared Resources</CardTitle>
          <CardDescription>
            Programs and routines shared across the organization
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {sharedResources?.programs && sharedResources.programs.length > 0 && (
              <div>
                <h4 className="font-medium mb-2">
                  Programs ({sharedResources.programs.length})
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {sharedResources.programs.map((program: any) => (
                    <div key={program.id} className="p-3 border rounded-lg">
                      <p className="font-medium">{program.title}</p>
                      <p className="text-sm text-muted-foreground">
                        Created by {program.createdByCoach?.name || "Unknown"}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {sharedResources?.routines && sharedResources.routines.length > 0 && (
              <div>
                <h4 className="font-medium mb-2">
                  Routines ({sharedResources.routines.length})
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {sharedResources.routines.map((routine: any) => (
                    <div key={routine.id} className="p-3 border rounded-lg">
                      <p className="font-medium">{routine.name}</p>
                      <p className="text-sm text-muted-foreground">
                        Created by {routine.createdByCoach?.name || "Unknown"}
                      </p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {(!sharedResources?.programs || sharedResources.programs.length === 0) &&
             (!sharedResources?.routines || sharedResources.routines.length === 0) && (
              <p className="text-muted-foreground text-center py-8">
                No shared resources yet. Start sharing programs and routines with your team!
              </p>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function OrganizationClients({ organization }: { organization: any }) {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Organization Clients</CardTitle>
          <CardDescription>
            All clients across all coaches in the organization
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground text-center py-8">
            Client management view coming soon! This will show all clients from all coaches in the organization.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}

function OrganizationAnalytics({ organization }: { organization: any }) {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Organization Analytics</CardTitle>
          <CardDescription>
            Insights and analytics for your organization
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground text-center py-8">
            Analytics dashboard coming soon! This will show organization-wide metrics and insights.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}

function OrganizationSettings({ organization }: { organization: any }) {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Organization Settings</CardTitle>
          <CardDescription>
            Configure your organization settings and preferences
          </CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground text-center py-8">
            Organization settings coming soon! This will include configuration options for your organization.
          </p>
        </CardContent>
      </Card>
    </div>
  );
}
                <p className="text-muted-foreground mt-1">
                  {organization.description}
                </p>
              )}
              <div className="flex items-center gap-2 mt-2">
                <Badge className={TIER_COLORS[organization.tier]}>
                  {organization.tier}
                </Badge>
                <span className="text-sm text-muted-foreground">
                  {organization._count.coaches} / {organization.coachLimit}{" "}
                  coaches
                </span>
                <span className="text-sm text-muted-foreground">
                  • {organization._count.clients} / {organization.clientLimit}{" "}
                  clients
                </span>
              </div>
            </div>

            <div className="flex gap-2">
              {canManageOrganization && (
                <Button variant="outline" onClick={handleEditClick}>
                  <Settings className="mr-2 h-4 w-4" />
                  Edit Organization
                </Button>
              )}
              {canInviteCoaches && (
                <Button onClick={() => setShowInviteModal(true)}>
                  <Plus className="mr-2 h-4 w-4" />
                  Invite Coach
                </Button>
              )}
              {canManageOrganization && (
                <Button
                  variant="outline"
                  onClick={() => setShowCreateModal(true)}
                >
                  Upgrade Plan
                </Button>
              )}
              {canLeaveOrganization && (
                <Button
                  variant="destructive"
                  onClick={handleLeaveOrganization}
                  disabled={leaveOrganizationMutation.isPending}
                >
                  Leave Organization
                </Button>
              )}
            </div>
          </>
        ) : (
          <form onSubmit={handleSaveEdit} className="flex-1 space-y-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Organization Name</label>
              <input
                type="text"
                value={editFormData.name}
                onChange={e =>
                  setEditFormData({ ...editFormData, name: e.target.value })
                }
                className="w-full px-3 py-2 border rounded-lg bg-background"
                disabled={updateOrganizationMutation.isPending}
                required
              />
            </div>
            <div className="space-y-2">
              <label className="text-sm font-medium">Description</label>
              <textarea
                value={editFormData.description}
                onChange={e =>
                  setEditFormData({
                    ...editFormData,
                    description: e.target.value,
                  })
                }
                className="w-full px-3 py-2 border rounded-lg bg-background"
                rows={3}
                disabled={updateOrganizationMutation.isPending}
              />
            </div>
            <div className="flex gap-2">
              <Button
                type="submit"
                disabled={updateOrganizationMutation.isPending}
              >
                Save Changes
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={handleCancelEdit}
                disabled={updateOrganizationMutation.isPending}
              >
                Cancel
              </Button>
            </div>
          </form>
        )}
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Coaches</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {organization._count.coaches}
            </div>
            <p className="text-xs text-muted-foreground">
              Max: {organization.coachLimit}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Clients</CardTitle>
            <UserCheck className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {organization._count.clients}
            </div>
            <p className="text-xs text-muted-foreground">
              Max: {organization.clientLimit}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Shared Programs
            </CardTitle>
            <Share2 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {sharedResources?.programs?.length || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              Available to all coaches
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Shared Routines
            </CardTitle>
            <Calendar className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {sharedResources?.routines?.length || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              Available to all coaches
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Coaches List */}
      <Card>
        <CardHeader>
          <CardTitle>Organization Members</CardTitle>
          <CardDescription>
            Coaches in your organization and their roles
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {organization.coaches.map(coach => {
              const role = coach.coachOrganizations[0]?.role || "COACH";
              const RoleIcon = ROLE_ICONS[role];

              return (
                <div
                  key={coach.id}
                  className="flex items-center justify-between p-3 border rounded-lg"
                >
                  <div className="flex items-center gap-3">
                    <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
                      <User className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <p className="font-medium">{coach.name || "Unknown"}</p>
                      <p className="text-sm text-muted-foreground">
                        {coach.email}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge
                      variant="outline"
                      className="flex items-center gap-1"
                    >
                      <RoleIcon className="h-3 w-3" />
                      {role}
                    </Badge>
                  </div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Invitations Management (for owners/admins) */}
      {canManageOrganization && allInvitations.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Invitation Management</CardTitle>
            <CardDescription>
              View and manage all invitations sent to coaches
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {allInvitations.map(invitation => (
                <div
                  key={invitation.id}
                  className="flex items-center justify-between p-3 border rounded-lg"
                >
                  <div className="flex items-center gap-3">
                    <div className="h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center">
                      <User className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <p className="font-medium">
                        {invitation.coach.name || "Unknown"}
                      </p>
                      <p className="text-sm text-muted-foreground">
                        {invitation.coach.email}
                      </p>
                      <p className="text-xs text-muted-foreground mt-1">
                        Invited{" "}
                        {new Date(invitation.joinedAt).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge
                      variant={invitation.isActive ? "default" : "outline"}
                      className="flex items-center gap-1"
                    >
                      {invitation.isActive ? "Active" : "Pending"}
                    </Badge>
                    {!invitation.isActive && (
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleResendInvitation(invitation.id)}
                          disabled={
                            resendInvitationMutation.isPending ||
                            cancelInvitationMutation.isPending
                          }
                        >
                          Resend
                        </Button>
                        <Button
                          size="sm"
                          variant="destructive"
                          onClick={() => handleCancelInvitation(invitation.id)}
                          disabled={
                            resendInvitationMutation.isPending ||
                            cancelInvitationMutation.isPending
                          }
                        >
                          Cancel
                        </Button>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Shared Resources */}
      {((sharedResources?.programs && sharedResources.programs.length > 0) ||
        (sharedResources?.routines && sharedResources.routines.length > 0)) && (
        <Card>
          <CardHeader>
            <CardTitle>Shared Resources</CardTitle>
            <CardDescription>
              Programs and routines shared across the organization
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {sharedResources?.programs &&
                sharedResources.programs.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-2">
                      Programs ({sharedResources.programs.length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                      {sharedResources.programs.map(program => (
                        <div key={program.id} className="p-3 border rounded-lg">
                          <p className="font-medium">{program.title}</p>
                          <p className="text-sm text-muted-foreground">
                            Created by{" "}
                            {program.createdByCoach?.name || "Unknown"}
                          </p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

              {sharedResources?.routines &&
                sharedResources.routines.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-2">
                      Routines ({sharedResources.routines.length})
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                      {sharedResources.routines.map(routine => (
                        <div key={routine.id} className="p-3 border rounded-lg">
                          <p className="font-medium">{routine.name}</p>
                          <p className="text-sm text-muted-foreground">
                            Created by{" "}
                            {routine.createdByCoach?.name || "Unknown"}
                          </p>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Modals */}
      <OrganizationCreateModal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        onSuccess={() => refetch()}
      />

      <OrganizationInviteModal
        isOpen={showInviteModal}
        onClose={() => setShowInviteModal(false)}
        organizationId={organization.id}
        organizationName={organization.name}
        onSuccess={() => refetch()}
      />
    </div>
  );
}
